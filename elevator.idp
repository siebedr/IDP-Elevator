// First name: Siebe
// Last name: Dreesen
// Student number: r0884600


// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t

    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors

    // Fluents
    ElPosition(Time):Floor				// The floor of the elevator at time point t
    ElDoorState(Time):DoorState			// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t

    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed
            
    type ElAction constructed from {Up, Down, Stay}
    do(Time, ElAction) 
    
    // Elevator position, no initial needed becuase starts at bottom = 0
    C_ElPosition(Time, Floor)
    Cn_ElPosition(Time, Floor)
    
    // Unanswered request
    C_UnansweredRequest(Time, Floor)
    Cn_UnansweredRequest(Time, Floor)
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}


// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student:V_student {
    
    // CAUSE PREDICATES
    {
        ElPosition(Start) = 0.
        ! t[Time] f[Floor]: ElPosition(Next(t)) = f <- C_ElPosition(t, f).
        ! t[Time] f[Floor]: ElPosition(Next(t)) = f <- ElPosition(t) = f & ~Cn_ElPosition(t, f).
    }
    {
    	! t[Time] f[Floor]: C_ElPosition(t, f+1) <- do(t, Up) & ElPosition(t) = f.
        ! t[Time] f[Floor]: C_ElPosition(t, f-1) <- do(t, Down) & ElPosition(t) = f.
        ! t[Time] f[Floor]: C_ElPosition(t, f) <- do(t, Stay) & ElPosition(t) = f.
        ! t[Time] f[Floor]: Cn_ElPosition(t, f) <- ? fx[Floor]: C_ElPosition(t, fx) & f ~= fx.
    }
    
    {
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- C_UnansweredRequest(t, f).
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- UnansweredRequest(t, f) & ~Cn_UnansweredRequest(t, f).
    }
    {
        ! t[Time] f[Floor]: C_UnansweredRequest(t, f) <- MakeRequest(t, f) & ~UnansweredRequest(t, f).
        ! t[Time] f[Floor]: Cn_UnansweredRequest(t, f) <-  ? tx[Time] : tx =< t & UnansweredRequest(tx, f) & ElPosition(t) = f. // TODO ADD DOORSTATES // De lift is er al geweest en heeft zijn deuren geopend, maakt niet uit wanneer... moet enkel later gebeurd zijn
    }
    
    
   	// 1 action at a time
	! t[Time]: ?=1 a[ElAction]: do(t, a).

	// Max en Min floor
    ! t[Time] f[Floor]: ElPosition(t) = f & do(t, Up) => ? fx[Floor]: fx > f.
    ! t[Time] f[Floor]: ElPosition(t) = f & do(t, Down) => ? fx[Floor]: fx < f.
    
    // Doors closed when moving
    ! t[Time] : do(t, Up) | do(t, Down) => ElDoorState(t) = Closed.
    
    // Scanning movement
    ! t[Time] f[Floor]: ElPosition(t) = f & (? fx[Floor] tx[Time]: fx > f & tx =< t & UnansweredRequest(tx, fx)) => do(t, Up). // Go up if there is a higher unanswered request
    ! t[Time] f[Floor]: ElPosition(t) = f & (? fx[Floor] tx[Time]: fx < f & tx =< t & UnansweredRequest(tx, fx)) => do(t, Down).
    ~(! t[Time] f[Floor]: UnansweredRequest(t, f) => do(t, Stay)).
}


// MAIN PROCEDURE
// If you have to change the main procedure for debugging purposes, be careful and restore it back once you finish debugging.
procedure main() {
    local CompleteTheory = merge(T_fixed, T_student)

    //explainunsat(CompleteTheory, S1)
    
    // Change the structure name to try other structures (check the included file "structures.idp" for available provided structures, and feel free to add additional structures)
    model = onemodel(CompleteTheory, S1)

    // Printing model
    print(model)

    // Visualization
    initVisualization()
    visualizeElevator(model)
}

// File responsible for visualization
include "visualize_elevator.idp"

// Structures for testing
// You can open this file and check the given structures
include "structures.idp"
