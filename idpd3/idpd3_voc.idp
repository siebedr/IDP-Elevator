/**
 * This is the vocabulary file of the idpd3 library
 */
namespace idpd3 {
  /**
   * The common types of the visualisation.
   */
  vocabulary V_types {
    type shape constructed from {circ, rect, text, link, link_directed, img}
    type time isa int
    type key isa string
    type color isa string
    type label isa string
    type width isa int
    type height isa int
    type order isa int
    type image isa string
    //type keyboard
  }

  /**
   * This is the input vocabulary containing the raw actions.
   */
  vocabulary V_in {
    extern vocabulary V_types
    
    d3_click(time, key)
    //d3_mouseclick(time, width, height)
    //d3_keyboard(time, keyboard)
    //d3_text(time, string)
  }

  /**
   * This is the output vocabulary containing the drawing primitives.
   */
  vocabulary V_out {
    extern vocabulary V_types
      
    d3_width(time) : width
    d3_height(time) : height
    partial d3_type(time, key) : shape
    partial d3_x(time, key) : width
    partial d3_y(time, key) : height
    partial d3_color(time, key) : color
    partial d3_order(time, key) : order
    partial d3_circ_r(time, key) : width
    partial d3_rect_width(time, key) : width
    partial d3_rect_height(time, key) : height
    partial d3_text_label(time, key) : label
    partial d3_text_size(time, key) : width
    partial d3_img_path(time, key) : image

    partial d3_link_width(time, key) : width
    partial d3_link_from(time, key) : key
    partial d3_link_to(time, key) : key
    d3_node(time, key)
    d3_isFixed(time, key)
  }

  /**
   * This procedure initialises the idpd3 library.
   * This procedure loads the input and output library, a JSON encoder and the JSON communication driver.
   */
  procedure init_idpd3(path) {
    path = path or "idpd3/"
    idpd3_in = require(path.."idpd3_in"):create(idpd3::V_in);
    idpd3_out = require(path.."idpd3_out"):create(idpd3::V_out);
    json = require(path.."dkjson")
    idpd3_browser = require(path.."idpd3_browser"):create(idpd3_in, idpd3_out, json);
    idpd3_check = require(path.."idpd3_check"):create(idpd3_out, json) 

    function visualise(S)
      local luaTable = idpd3_out:getD3(S);
      luaTable = {animation = luaTable};
      local json = json.encode(luaTable);
      io.stdout:write(json, "\n");
      io.stdout:flush();
    end
    idpd3 = {};
    idpd3.visualise = visualise;
  }
}
